
Bitwise Operators in C


The bitwise operators are the operators used to perform the operations on the data at the bit-level. 

When we perform the bitwise operations, then it is also known as bit-level programming.

It consists of two digits, either 0 or 1. It is mainly used in numerical computations to make the calculations faster.







Bitwise AND Operator ( & )

If the corresponding bits of both the operands are 1, then the output of the bitwise AND operation is 1; otherwise, the output would be 0.




Bitwise OR operator ( | )

If the bit value of any of the operand is 1, then the output would be 1, otherwise 0.



Bitwise exclusive OR operator ( ^ )

If the corresponding bit of any of the operand is 1 then the output would be 1, otherwise 0.



Bitwise Complement Operator ( ~ )

The bitwise complement operator is also known as one's complement operator.
It takes only one operand or variable and performs complement operation on an operand.
When we apply the complement operation on any bits, then 0 becomes 1 and 1 becomes 0.



Bitwise left-shift operator

It is an operator that shifts the number of bits to the left-side.

Bitwise left-shift operators syntax :-

Operand << n ; 

Where, Operand is an integer expression on which we apply the left-shift operation. n is the number of bits to be shifted.



Bitwise right-shift operator

It is an operator that shifts the number of bits to the right side.

Bitwise left-shift operators syntax :-

Operand >> n ; 

Where, Operand is an integer expression on which we apply the right-shift operation. n is the number of bits to be shifted.


