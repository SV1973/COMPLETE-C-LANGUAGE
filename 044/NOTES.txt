

VIDEO 044 - RECURSION IN C 




Recursion is the process which comes into existence when a function calls a copy of itself to work on a smaller problem.

Any function which calls itself is called recursive function, and such function calls are called recursive calls.

Any problem that can be solved recursively, can also be solved iteratively.

However, some problems are best suited to be solved by the recursion, for example, tower of Hanoi, Fibonacci series, factorial finding, etc.


SYNTAX FOR DEFINING THE RECRUSIVE FUUNCTION :-

return_type recursive_function_name() {

    if (test_for_base) {  
        return some_value;  
    }  
    else if (test_for_another_base) {  
        return some_another_value;  
    }  
    else {  
        // Statements;  
        recursive call;  
    }

}  











MEMORY ALLOCATION OF RECIRSIVE METHOD :- 

Each recursive call creates a new copy of that method in the memory.

Once some data is returned by the method, the copy is removed from the memory.

Since all the variables and other stuff declared inside function get stored in the stack, therefore a separate stack is maintained at each recursive call.

Once the value is returned from the corresponding function, the stack gets destroyed.

Recursion involves so much complexity in resolving and tracking the values at each recursive call.

Therefore we need to maintain the stack and track the values of the variables defined in the stack.